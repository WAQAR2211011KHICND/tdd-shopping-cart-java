/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.shadow.com.univocity.parsers.common.IterableResult;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(),
         "app should have a greeting");
    }

    
// 1. Given that I a new --shopper--, when I begin 
// shopping, then I expect my --cart-- to be empty.
    @Test
    void testEmptyCart(){
        
        //Setup
        Cart cut = new Cart(); 

        //Execute
        Integer actual = cut.getItemsList().size();

        //Assert
        assertEquals(0, actual);

    }

// 2. Given I have an empty --cart--,
//    when I add an ---Item---, 
//    then I expect to the price reflect the sum of all the Items
//    in my cart.

    @Test
    void totalPriceWhenItemAdded(){

        //Setup
        Cart cut = new Cart(); 
        Item item1 = new Item( 1L, "Gooey Baton handbags" , 1000L);
        
        //Execute
        cut.addItem(item1);
        
        //Assert
        assertEquals(1000L, cut.getTotalPrice());
        
    }

// 3. Given I have cart with one item, 
//     when I add more of that item, 
//     then I expect to see its quantity update 
//     on the cart.
@Test
void checkTheQuantityUpdateOfItem(){

    //Setup
    Cart cut = new Cart(); 
    Item item1 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item2 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    
    //Execute
    cut.addItem(item1);
    cut.addItem(item2);
    
    //Assert
    assertEquals(2, cut.getItemQuantity(1L));
    
}

// 4. Given I have an empty cart, when I add items,
//    then I expect it to see an itemized list of the items
//    along with their price and quantity.

@Test
void gettingItemizedList(){
    
    //Setup
    Cart cut = new Cart(); 
    Item item1 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item2 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item3 = new Item( 2L, "Rolex watches" , 1000L);
    
    //Execute
    cut.addItem(item1);
    cut.addItem(item2);
    cut.addItem(item3);

    List<String> Expected = Arrays.asList(
             "Item Name : Gooey Baton handbags \nPrice : 1000 \nQuantity : 2"
            ,"Item Name : Rolex watches \nPrice : 1000 \nQuantity : 1"
        );
    List<String> Actual = cut.getItemsList(); 
    
    //Assert
    assertArrayEquals(Expected.toArray(), Actual.toArray());
    
}


// 5. Given I have a cart with items that are not on sale, 
// when I add an item that's on sale, I expect to see it highlighted.
@Test
void getHighlightItem(){
    
    //Setup
    Cart cut = new Cart(); 
    Item item1 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item2 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item3 = new Item( 2L, "Rolex watches" , 1000L, true);
    
    //Execute
    cut.addItem(item1);
    cut.addItem(item2);
    cut.addItem(item3);

    //Highlighted the sale item name with 4 Star around them. 
    List<String> Expected = Arrays.asList(
             "Item Name : Gooey Baton handbags \nPrice : 1000 \nQuantity : 2"
            ,"Item Name : ****Rolex watches**** \nPrice : 1000 \nQuantity : 1"
        );

    List<String> Actual = cut.getItemsList(); 
    
    //Assert
    assertArrayEquals(Expected.toArray(), Actual.toArray());
    
}


// 6. Given I have a cart with items, when I remove an item,
//    then I expect the cart to display the updated itemized list.
@Test
void removeITemOnCart(){
    
    //Setup
    Cart cut = new Cart(); 
    Item item1 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item2 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item3 = new Item( 2L, "Rolex watches" , 1000L, true);
    cut.addItem(item1);
    cut.addItem(item2);
    cut.addItem(item3);
    
    //Execute
    cut.removeItem(item3);

    List<String> Expected = Arrays.asList(
             "Item Name : Gooey Baton handbags \nPrice : 1000 \nQuantity : 2"
            // ,"Item Name : ****Rolex watches**** \nPrice : 1000 \nQuantity : 1"
        );

    List<String> Actual = cut.getItemsList(); 
    
    //Assert
    assertArrayEquals(Expected.toArray(), Actual.toArray());
    
}

// 7. Given I have one item in my cart with a quantity of 3,
//    when I remove one, then I expect the cart to have 2 of that item.
@Test
void reduceItemQuantity(){
    
    //Setup
    Cart cut = new Cart(); 
    Item item1 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item2 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item3 = new Item( 1L, "Gooey Baton handbags" , 1000L);
    Item item4 = new Item( 2L, "Rolex watches" , 1000L, true);
    cut.addItem(item1);
    cut.addItem(item2);
    cut.addItem(item3);
    cut.addItem(item4);
    
    //Execute
    cut.removeItem(item3);

    List<String> Expected = Arrays.asList(
             "Item Name : Gooey Baton handbags \nPrice : 1000 \nQuantity : 2"
            ,"Item Name : ****Rolex watches**** \nPrice : 1000 \nQuantity : 1"
        );

    List<String> Actual = cut.getItemsList(); 
    
    //Assert
    assertArrayEquals(Expected.toArray(), Actual.toArray());
    
}


}



/***
 
Class

1. Shopper
2. cart
3. item
4. 

 */